---
interface Props {
  contantainerid: string;
}
const { contantainerid } = Astro.props;
---
<div  class={`relative ${contantainerid}`}>
<button
  id=`${contantainerid}-prev`
  class="hidden sm:flex absolute m-3 top-1/2 left-0 transform -translate-y-1/2 active:scale-95 "
  onclick={`scrollAmount('${contantainerid}', -1)`} >
  <svg
    class="w-0 sm:w-10 h-0 sm:h-10"
    width="208"
    height="208"
    viewBox="0 0 208 208"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      opacity="1"
      d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
      fill="white"></path>
    <path
      d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
      stroke="black"
      stroke-width="16"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
    <path
      d="M120 64L80 104L120 144"
      stroke="black"
      stroke-width="16"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</button>
<div
  id={contantainerid}
  class="flex space-x-4 overflow-x-auto whitespace-nowrap py-5 scrollbar-hide dragscroll active:cursor-grab"
>
  <slot />
</div>
<button
  id=`${contantainerid}-next`
  class="hidden sm:flex absolute m-3 top-1/2 right-0 transform -translate-y-1/2 active:scale-95"
  onclick={`scrollAmount('${contantainerid}', 1)`}
  ><svg
    class="w-0 sm:w-10 h-0 sm:h-10"
    width="208"
    height="208"
    viewBox="0 0 208 208"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      opacity="1"
      d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
      fill="white"></path>
    <path
      d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
      stroke="black"
      stroke-width="16"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
    <path
      d="M88 64L128 104L88 144"
      stroke="black"
      stroke-width="16"
      stroke-linecap="round"
      stroke-linejoin="round"></path>
  </svg>
</button>

</div>
<script is:inline>

var containerIds = ["youtubevideos", "selectedmoviecast", "mediaimages"];


function scrollAmount(containerId, direction) {
  var container = document.getElementById(containerId);
  var amount = window.innerWidth * 0.7 * direction; // Scroll 70% of the screen width
  container.scrollBy({ top: 0, left: amount, behavior: "smooth" });

  // After scrolling, check if the buttons should be hidden
  setTimeout(function () {
    hidePrevButton(containerId);
    hideNextButton(containerId);
  }, 200); // Wait for the scroll to finish
}

function hidePrevButton(containerId) {
  var container = document.getElementById(containerId);
  var prevButton = document.getElementById(containerId + "-prev");

  if (container && container.scrollLeft <= 0) {
    prevButton.style.display = "none";
  } else if (prevButton) {
    prevButton.style.display = "block";
  }
}

function hideNextButton(containerId) {
  var container = document.getElementById(containerId);
  var nextButton = document.getElementById(containerId + "-next");

  if (container && container.scrollLeft + container.offsetWidth >= container.scrollWidth) {
    nextButton.style.display = "none";
  } else if (nextButton) {
    nextButton.style.display = "block";
  }
}

// Call hidePrevButton and hideNextButton for each container when the DOM is fully loaded
document.addEventListener("DOMContentLoaded", function () {
  containerIds.forEach(function (containerId) {
    hidePrevButton(containerId);
    hideNextButton(containerId);

    // Add scroll event listener to each container
    var container = document.getElementById(containerId);
    if (container) {
      container.addEventListener("scroll", function () {
        hidePrevButton(containerId);
        hideNextButton(containerId);
      });
    }
  });
});
</script>
