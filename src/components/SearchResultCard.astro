---
import { Image } from 'astro:assets';
import genreList from './genres';
interface Props {
  id: string;
  title: string;
  date: string;
  description: string;
  rating: number;
  reviews: number;
  type: string;
  language: string;
  genres: string[];
  image: string;
}
const cdn =
  'https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/';
const {
  id,
  title,
  date,
  description,
  rating,
  reviews,
  type,
  language,
  genres,
  image,
} = Astro.props;
const ratingColor = rating > 7 ? 'green' : rating > 5 ? 'yellow' : 'red';
const imageUrl =
  image === 'https://image.tmdb.org/t/p/original/null' ||
  image === 'https://image.tmdb.org/t/p/original/undefined'
    ? 'https://via.placeholder.com/300x450?text=Image+Not+Found'
    : image;

let dateObj = new Date(date);
let options = { year: 'numeric', month: 'long', day: 'numeric' };
let formattedDate = dateObj.toLocaleDateString(
  'en-US',
  options as Intl.DateTimeFormatOptions
);

function getGenreName(id: string) {
  let genre = genreList.find((genre) => genre.id === id);
  return genre?.name;
}
const urltitle = title.replace(/ /g, '-').toLowerCase();
function formatNumber(num: number) {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  } else {
    return num;
  }
}
---

<a
  href={`/${type}/${id}/${urltitle}`}
  class="flex flex-col sm:flex-row max-w-3xl justify-between bg-gray-200 rounded-2xl focus:ring-2 focus:outline-none ring-gray-400 bg-gray-200/70 hover:shadow-md"
>
  <div class="w-full sm:w-1/3 block place-items-center p-3">
    <Image
      src={cdn + imageUrl}
      height={600}
      width={400}
      alt={title}
      class="bg-gray-200 max-h-96 sm:w-48 xl:w-[11rem] object-cover rounded-xl"
    />
  </div>
  <div
    class="w-full sm:w-2/3 flex flex-col sm:justify-center space-y-2 p-3 py-6"
  >
    <h1 class="text-xl capitalize sm:text-2xl font-bold text-black">
      {title}
    </h1>
    <h1 class="text-sm text-gray-800 sm:text-base">{formattedDate}</h1>
    <p class="my-3 text-sm text-gray-600">
      {
        description && description.length > 0
          ? description.length > 150
            ? description.substring(0, 150) + '...'
            : description
          : 'Description not found'
      }
    </p>

    <div class="flex justify-between py-3">
      <span class="flex items-center space-x-2">
        <span
          class={' flex items-center gap-1 text-' +
            ratingColor +
            '-700 bg-' +
            ratingColor +
            '-100   rounded-lg  px-2 py-1 text-sm  backdrop-blur md:px-3'}
        >
          <>
            <svg
              aria-hidden="true"
              class="w-5 h-5 text-yellow-400"
              fill="currentColor"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"
              ></path>
            </svg>
            <span>{isNaN(Number(rating)) ? 0 : Number(rating).toFixed(1)}</span>
          </>
        </span>
        <span class="hidden sm:flex text-xs"
          >({formatNumber(reviews)} reviews)</span
        >
      </span>
      <div>

        {
          type && (
            <span class="text-sm capitalize mx-2 px-2 py-1 bg-blue-200 text-blue-900 rounded-md">
              {type}
            </span>
          )
        }

        {
          language && (
            <span class="text-sm capitalize mx-2 px-2 py-1 bg-gray-300 text-black rounded-md">
              {language}
            </span>
          )
        }
      </div>
    </div>
    <div class="flex flex-wrap gap-2 py-2">
      {
        Array.isArray(genres) &&
          genres.length > 0 &&
          genres.map((genre) => (
            <span class="text-[10px]   px-2 py-1 bg-gray-300 text-gray-900 rounded-md">
              {getGenreName(genre)}
            </span>
          ))
      }
    </div>
  </div></a
>
<span class="hidden text-green-700 bg-green-100 border-green-500"> </span>
<span class="hidden text-red-700 bg-red-100 border-red-500"> </span>
<span class="hidden text-yellow-700 bg-yellow-100 border-yellow-500"> </span>
