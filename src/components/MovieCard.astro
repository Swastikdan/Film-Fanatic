---
import { Image } from "astro:assets";

interface Props {
  id: number;
  title: string;
  image: string;
  rating: number;
  year: string;
  type: string;
  language: string;
}

const cdn = "https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/"
const { id ,title, image, rating, year, type , language } = Astro.props;
const ratingColor = rating > 7 ? "green" : rating > 5 ? "yellow" : "red";
const imageUrl = (image === 'https://image.tmdb.org/t/p/original/null' || image === 'https://image.tmdb.org/t/p/original/undefined') ? `https://via.placeholder.com/300x450?text=Image+Not+Found` : image;
const urltitle = title.replace(/ /g, "-").toLowerCase();
---

<a href={`/${type}/${id}/${urltitle}`} class="group rounded-lg focus:ring-2 focus:outline-none ring-white">
  <div 
    class="relative block h-[20rem] overflow-hidden rounded-t-lg ">
    <Image 
      src={cdn+imageUrl}
      width={500}
      height={900}
      decoding="async"
    loading="lazy"
      alt="movieImage"
      class="h-full w-full object-cover object-center transition duration-200 group-hover:scale-105 bg-gray-400"
      
    />
    {rating && Number(rating) !== 0 && 
  
    <span class={"absolute left-3 top-3 flex items-center gap-1 text-" + ratingColor + "-700 bg-" + ratingColor + "-100  mr-3 mb-3 rounded-lg  px-2 py-1 font-semibold text-md  backdrop-blur md:px-3"}>
      <svg aria-hidden="true" class="w-5 h-5  text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg><span>{isNaN(Number(rating)) ? 0 : Number(rating).toFixed(1)}</span>
          </span> }
  </div>

  <div class="bg-white rounded-b-lg">
    <div class="p-4">
      <span class=" text-lg md:text-[16px] capitalize font-bold text-gray-900 transition duration-100 py-5">{title?.length > 20 ? `${title.substring(0, 20)} ...` : title ?? ''}</span>
      </span>
      <div class="flex justify-between mt-3">
        <span class="text-sm text-gray-700 lg:text-base">{new Date(year).getFullYear()}</span>
        <div class="text-black">
          <span class="text-sm sm:text-base font-sans font-medium capitalize mx-2 px-2 py-1 bg-blue-100/60 text-blue-800 rounded-md"
            >{type}</span
          >
          <span
            class="text-sm sm:text-base font-sans font-medium capitalize mx-2 px-2 py-1 bg-gray-200/60 text-gray-800 rounded-md"
            >{language}</span
          >
        </div>
      </div>
    </div>
  </div>
</a>

  <span class="hidden text-green-700 bg-green-100 border-green-500 ">
          </span>
  <span class="hidden text-red-700 bg-red-100 border-red-500 ">
          </span>
  <span class="hidden text-yellow-700 bg-yellow-100 border-yellow-500 ">
          </span>