---
import { Image } from "astro:assets";
import Layout from "../../../../layouts/Layout.astro";
import Secondarynav from "../../../../components/Secondarynav";
import ScrollComponent from "../../../../components/ScrollComponent.astro";
import Model from "../../../../components/Model.astro";
const { id, slug } = Astro.params;
const key = import.meta.env.ApiKeyAuth;
const url = import.meta.env.ApiUrl;
const vcdn =
  "https://media.dev.to/cdn-cgi/image/width=550,height=300,fit=cover,gravity=auto,format=auto,quality=100/";
const hcdn =
  "https://media.dev.to/cdn-cgi/image/width=300,height=550,fit=cover,gravity=auto,format=auto,quality=100/";

const cdn =
  "https://media.dev.to/cdn-cgi/image/fit=cover,gravity=auto,format=auto,quality=100/";
interface Movie {
  id: number;
  title: string;
  overview: string;
  poster_path: string;
  backdrop_path: string;
  release_date: string;
  color?: string;
}

interface Backdrop {
  aspect_ratio: number;
  height: number;
  iso_639_1: string;
  file_path: string;
  vote_average: number;
  vote_count: number;
  width: number;
}

interface Poster {
  aspect_ratio: number;
  height: number;
  iso_639_1: string;
  file_path: string;
  vote_average: number;
  vote_count: number;
  width: number;
}

interface Logo {
  aspect_ratio: number;
  height: number;
  iso_639_1: string;
  file_path: string;
  vote_average: number;
  vote_count: number;
  width: number;
}

interface MovieImages {
  backdrops: Backdrop[];
  id: number;
  logos: Logo[];
  posters: Poster[];
}

async function loadImages(): Promise<MovieImages> {
  const res = await fetch(`${url}/movie/${id}/images?api_key=${key}`);
  return res.json();
}

let images = await loadImages().then((data) => {
  return {
    id: data.id,
    backdrops: data.backdrops.sort((a, b) => b.vote_average - a.vote_average),
    logos: data.logos.sort((a, b) => b.vote_average - a.vote_average),
    posters: data.posters.sort((a, b) => b.vote_average - a.vote_average),
  };
});

async function loadMovie(): Promise<Movie> {
  const res = await fetch(`${url}/movie/${id}?api_key=${key}`);
  return res.json();
}
let movie = await loadMovie().then((data) => {
  return {
    id: data.id,
    title: data.title,
    description: data.overview,
    poster_path: data.poster_path,
    backdrop_path: data.backdrop_path,
    release_date: data.release_date,
    year: new Date(data.release_date).getFullYear(),
  };
});
const image = `${hcdn}https://image.tmdb.org/t/p/original${movie.poster_path}`;
// let color = await fetch(
//   `${Astro.url.origin}/api/imagecolor.json?image=${image}`
// ).then((res) => res.json());

// color = color.color;
const ogtitle: string = `The Cast of the movie | ${movie.title}`;
const ogdescription: string = movie.description;
const ogImage: string = movie.poster_path
  ? `https://image.tmdb.org/t/p/original${movie.poster_path}`
  : `https://placehold.co/500x750?text=${movie.title}`;
---

<Layout
  title={ogtitle}
  description={ogdescription}
  ogImage={ogImage}>
  <main class=''>
    <Secondarynav
      data={movie}
      type={"movie"}
      url={Astro.url.href}
      id={id}
      slug={slug}
      color='#5C735D'
      client:load
      client:only='react'
    />

    {
      images.backdrops.length < 2 && images.posters.length < 2 ? (
        <section class='max-w-screen-2xl block mx-auto  text-center min-h-screen items-center px-3 md:px-6 xl:px-20 pt-5 pb-10'>
          <span class='text-xl sm:text-2xl font-semibold text-center mt-10 pb-4'>
            No Images Found
          </span>
        </section>
      ) : (
        <section class='max-w-screen-2xl block mx-auto items-center px-3 md:px-6 xl:px-14 pt-5 pb-10'>
          <span class='text-xl sm:text-2xl font-semibold underline underline-offset-8 pb-4'>
            Movie Stills
          </span>

          <div class='pt-5 pb-10'>
            <ScrollComponent
              buttons={true}
              scrollbar={true}
              contantainerid='backdrops'>
              {images.backdrops.map((image) => (
                <Model
                  isimage={true}
                  link={`https://image.tmdb.org/t/p/original${image.file_path}`}>
                  <Image
                    src={`${vcdn}https://image.tmdb.org/t/p/original${image.file_path}`}
                    alt={movie.title}
                    width={image.width}
                    height={image.height}
                    aspect-ratio={image.aspect_ratio}
                    loading='lazy'
                    slot='model-trigger'
                    class='rounded-lg bg-gray-200 min-h-36 md:min-h-56 min-w-72 md:min-w-96 w-full mb-2'
                  />

                  <Image
                    src={`${cdn}https://image.tmdb.org/t/p/original${image.file_path}`}
                    alt={movie.title}
                    width={image.width}
                    height={image.height}
                    aspect-ratio={image.aspect_ratio}
                    loading='lazy'
                    class='w-auto h-full items-center justify-center rounded-lg object-center max-h-[98vh] m-0 bg-gray-200'
                    slot='model-content'
                  />
                </Model>
              ))}
            </ScrollComponent>
          </div>

          <span class='text-xl sm:text-2xl font-semibold underline underline-offset-8 pb-4'>
            Posters
          </span>

          <div class='pt-5 pb-10'>
            <ScrollComponent
              buttons={true}
              scrollbar={true}
              contantainerid='posters'>
              {images.posters.map((image) => (
                <Model
                  isimage={true}
                  link={`https://image.tmdb.org/t/p/original${image.file_path}`}>
                  <Image
                    src={`${hcdn}https://image.tmdb.org/t/p/original${image.file_path}`}
                    alt={movie.title}
                    width={300}
                    height={500}
                    loading='lazy'
                    class='mb-2 h-56 w-full min-w-32 object-center rounded-lg  hover:scale-[.975] transition-all duration-150 ease-in-out bg-gray-200'
                    slot='model-trigger'
                  />

                  <Image
                    src={`https://image.tmdb.org/t/p/original${image.file_path}`}
                    alt={movie.title}
                    width={image.width}
                    height={image.height}
                    loading='lazy'
                    aspect-ratio={image.aspect_ratio}
                    class='w-auto h-full items-center justify-center rounded-lg object-center max-h-[98vh] m-0 bg-gray-200'
                    slot='model-content'
                  />
                </Model>
              ))}
            </ScrollComponent>
          </div>
        </section>
      )
    }
  </main>
</Layout>
