---
import ISO6391 from 'iso-639-1';
import Layout from "../../../layouts/Layout.astro";
import Poster from "../../../components/Poster.astro";
import Description from "../../../components/Description.astro";
import Rateing from "../../../components/Rateing.astro";
import SelectedCasts from "../../../components/SelectedCasts.astro";
import MediaImages from "../../../components/MediaImages.astro";
import ExtraInformation from "../../../components/ExtraInformation.astro";
import Keywords from "../../../components/Keywords.astro";
import Recommendations from "../../../components/Recommendations.astro";
const key = import.meta.env.ApiKeyAuth;
const url = import.meta.env.ApiUrl;
const { id, title } = Astro.params;
const path = Astro.url.pathname;
async function getmovie() {
  try {
    const response = await fetch(
      `${url}/movie/${id}?api_key=${key}&include_adult=true&append_to_response=external_ids,credits,images,videos,release_dates,recommendations,keywords`
    );
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
  }
}

// &language=en-US&&append_to_response=videos,release_dates,recommendations,keywords

const movie = await getmovie();

if (movie.success === false) {
  return new Response(null, {
    status: 404,
  });
}
if (movie.success !== false) {
  const urltitle =
    movie.title.replace(/ /g, "-").toLowerCase() ||
    movie.name.replace(/ /g, "-").toLowerCase();

  if (title !== urltitle) {
    return Astro.redirect(`/movie/${id}/${urltitle}`, 302);
  }
}
function formatNumber(num) {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + "M";
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + "K";
  } else {
    return num;
  }
}
const movietitle: string = movie.title || movie.name;
const movietagline: string = movie.tagline;
const moviedescription: string = movie.overview;
const movieimage: string = movie.poster_path
  ? `https://image.tmdb.org/t/p/original${movie.poster_path}`
  : `https://via.placeholder.com/500x750?text=${movietitle}`;
const movieyear: number = new Date(
  movie.release_date || movie.first_air_date
).getFullYear();
const usRelease: any = movie.release_dates.results.find(
  (result) => result.iso_3166_1 === "US"
);
const usCertification: string = usRelease
  ? usRelease.release_dates[0].certification
  : "Not found";
const hours: number = Math.floor(movie.runtime / 60);
const minutes: number = movie.runtime % 60;
const movieRuntime: string = `${hours}h ${minutes}m`;
const movierating: number = isNaN(Number(movie.vote_average))
  ? 0
  : Number(Number(movie.vote_average).toFixed(1));
const rateingcount: string = formatNumber(movie.vote_count);
const moviegenres: string[] = movie.genres.map((genre) => genre.name);
const youtubekeys: string[] = movie.videos.results.map((video) => video.key);
const selectedMovieCast: any = movie.credits.cast
  .sort((a, b) => b.popularity - a.popularity)
  .slice(0, 10)
  .map((cast) => ({
    name: cast.name,
    profile_path: cast.profile_path,
    character: cast.character,
  }));

const status: string = movie.status;
const originalLanguage = ISO6391.getName(movie.original_language);
const budget = '$' + movie.budget.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
const revenue = '$' + movie.revenue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
const mediaimages: string[] = movie.images.backdrops.map(
  (image) => `https://image.tmdb.org/t/p/original${image.file_path}`
);
const keywords:any = movie.keywords.keywords.map((keyword) => ({name: keyword.name, id: keyword.id}));
const recommendations = movie.recommendations.results.map((recommendation) => ({
  title: recommendation.title || recommendation.name,
  poster_path: 'https://image.tmdb.org/t/p/original' + recommendation.poster_path,
  id: recommendation.id,
  vote_average: parseFloat(recommendation.vote_average).toFixed(1),
  url_title: (recommendation.title || recommendation.name).toLowerCase().replace(/ /g, '-'),
  media_type: recommendation.media_type
}));

const ogtitle: string = movietitle;
const ogdescription: string =
  movie.overview ||
  `Watch ${ogtitle} online for free. ${ogtitle} is a movie from ${
    movie.release_date || movie.first_air_date
  }.`;
const ogImage: string = movie.poster_path
  ? `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://image.tmdb.org/t/p/original${movie.poster_path}`
  : `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://via.placeholder.com/500x750?text=${ogtitle}`;
---

<Layout title={ogtitle} description={ogdescription} ogImage={ogImage}>
 
  <main>
    <div
      class="max-w-screen-2xl block mx-auto items-center px-3 md:px-10 xl:px-20"
    >
      <section class="px-3">
        <div class="pt-10 pb-5">
          <div class="pb-5 space-y-3">
          <h1
            class="text-[19px] sm:text-xl md:text-2xl lg:text-3xl font-bold lg:px-0 "
          >
            {movietitle}
          </h1>
          <h2 class="text-gray-400 hidden sm:flex">{movietagline}</h2>
        </div>
          <div
            class="flex flex-col space-y-3 sm:flex-row items-start sm:items-center justify-start sm:justify-between"
          >
            <span
              class="space-x-1 whitespace-nowrap text-base sm:text-lg font-medium text-gray-300"
            >
              <span class="py-1">{movieyear}</span>
              <span class="py-1">.</span>
              <span class="px-2 py-1 text-gray-400 ring-2 ring-gray-400"
                >{usCertification}</span
              >
              <span class="py-1">.</span>
              <span class="py-1">{movieRuntime}</span>
            </span>
            <div class="hidden sm:flex">
              <Rateing rating={movierating} rateingcount={rateingcount} />
            </div>
          </div>
        </div>
        <div class="grid gap-5 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
          <Poster image={movieimage} title={title} />
          <div
            class="relative sm:col-span-2 lg:col-span-3 xl:col-span-4 bg-gray-300 rounded-lg"
          >
          </div>
        </div>

        <div
          class="text-sm md:text-base font-medium overflow-x-auto whitespace-nowrap sm:whitespace-normal py-5 scrollbar-hide"
        >
          {
            moviegenres &&
              moviegenres.map((genre) => (
                <span class="px-2 py-1 m-1 rounded-full ring-1 ring-white">
                  {genre}
                </span>
              ))
          }
        </div>
        <Description description={moviedescription} />
        <div class="sm:hidden">
          <Rateing rating={movierating} rateingcount={rateingcount} />
        </div>

        <div class="py-5">
          <span class="text-base md:text-lg font-semibold">Top Billed Cast</span
          ><SelectedCasts
                MovieCast={selectedMovieCast}
                contantainerid="selectedmoviecast"
              />
        </div>

        <a
          href=" "
          class="text-blue-500 font-semibold hover:underline pb-10 flex items-center gap-2"
          >Full Cast & Crew <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-6 h-6 mx-1 rtl:-scale-x-100"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
          </svg>
        </a>

         <div class="lg:hidden flex justify-start  -mt-5">
              <ExtraInformation
                status={status}
                originalLanguage={originalLanguage}
                budget={budget}
                revenue={revenue} />
            </div>
        <div class="py-5">
          <span class="text-base md:text-lg font-semibold">Media</span>

          <MediaImages
            movietitle={movietitle}
            movieimages={mediaimages}
            containerid="mediaimages"
          />
        </div>

        <div>
          <span class="text-base md:text-lg font-semibold ">Keywords</span>
          <div>
            <Keywords keywords={keywords} />
          </div>
        </div>
        <div class="py-5">
          <span class="text-base md:text-lg font-semibold">Recommendations</span>
         <Recommendations recomentations={recommendations} contantainerid="" />
        </div>
      </section>
    </div>
  </main>
</Layout>

<style is:global>
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
</style>

<script src="/dragscroll.js" is:inline></script>
