---
import { Image } from "astro:assets";
import Layout from "../../../layouts/Layout.astro";
import SelectedCasts from "../../../components/SelectedCasts.astro";
const key = import.meta.env.ApiKeyAuth;
const url = import.meta.env.ApiUrl;
const { id, title } = Astro.params;
const path = Astro.url.pathname;
async function getmovie() {
  try {
    const response = await fetch(
      `${url}/movie/${id}?api_key=${key}&include_adult=true&append_to_response=external_ids,credits,images,videos,release_dates,recommendations,keywords`
    );
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
  }
}

// &language=en-US&&append_to_response=videos,release_dates,recommendations,keywords

const movie = await getmovie();

if (movie.success === false) {
  return new Response(null, {
    status: 404,
  });
}
if (movie.success !== false) {
  const urltitle =
    movie.title.replace(/ /g, "-").toLowerCase() ||
    movie.name.replace(/ /g, "-").toLowerCase();

  if (title !== urltitle) {
    return Astro.redirect(`/movie/${id}/${urltitle}`, 302);
  }
}
const movietitle: string = movie.title || movie.name;
const movieyear: number =(new Date(movie.release_date || movie.first_air_date)).getFullYear();
const usRelease:any = movie.release_dates.results.find(result => result.iso_3166_1 === "US");
const usCertification:string = usRelease ? usRelease.release_dates[0].certification : 'Not found';
const hours:number = Math.floor(movie.runtime / 60);
const minutes:number = movie.runtime % 60;
const movieRuntime:string = `${hours}h ${minutes}m`;
const moviegenres: string[] = movie.genres.map((genre) => genre.name);
const youtubekeys: string[] = movie.videos.results.map((video) => video.key);
const selectedMovieCast:any = movie.credits.cast
  .sort((a, b) => b.popularity - a.popularity)
  .slice(0, 10)
  .map((cast) => ({
    name: cast.name,
    profile_path: cast.profile_path,
    character: cast.character
  }));
console.log(youtubekeys);
const moviedescription: string = movie.overview;
const movieimage: string = movie.poster_path
  ? `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://image.tmdb.org/t/p/original${movie.poster_path}`
  : `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=autohttps://via.placeholder.com/500x750?text=${movietitle}`;




const ogtitle:string = movietitle
const ogdescription: string =
  movie.overview ||
  `Watch ${ogtitle} online for free. ${ogtitle} is a movie from ${
    movie.release_date || movie.first_air_date
  }.`;
const ogImage: string = movie.poster_path
  ? `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://image.tmdb.org/t/p/original${movie.poster_path}`
  : `https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://via.placeholder.com/500x750?text=${ogtitle}`;
---

<Layout
  title={ogtitle}
  description={ogdescription}
  ogImage={ogImage}
>
  <main>
    <div
      class="max-w-screen-2xl block mx-auto items-center px-3 md:px-10 xl:px-20"
    >
      <section class="px-3">
        <div class="pt-10 pb-5">
          <h1
            class="text-lg sm:text-xl md:text-2xl lg:text-3xl font-bold lg:px-0 pb-5"
          >
            {movietitle}
          </h1>
          <div class="flex flex-col space-y-3 sm:flex-row items-start sm:items-center justify-start sm:justify-between">
          <span
            class="space-x-1 whitespace-nowrap text-base sm:text-lg font-medium text-gray-300"
          >
            <span class="py-1">{movieyear}</span>
            <span class="py-1">.</span>
            <span class="px-2 py-1 text-gray-400 ring-2 ring-gray-400"
              >{usCertification}</span
            >
            <span class="py-1">.</span>
            <span class="py-1">{movieRuntime}</span>
          </span>
        <div class="hidden sm:flex  space-x-3 text-gray-400 ">
           <div class="flex space-x-1 text-medium">
      <svg aria-hidden="true" class="w-5 h-5  text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>
       
      <span class=""> <span class="text-white font-bold"> 7.5</span>/10</span></div>
      <span>50k</span>
      <span class="text-blue-500">(User
Score)</span>
          </div>
        </div>
        </div>
   
        <div class="grid gap-5 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
          <div class="flex justify-center">
            <Image
              src={movieimage}
              width={400}
              height={600}
              alt=""
              class="bg-gray-600 object-cover rounded-xl"
            />
          </div>
         <!-- <div class="relative sm:col-span-2 lg:col-span-3 xl:col-span-4">
            
             <button id="image-container1-prev"
              class=" absolute m-3 top-1/2 left-0 transform -translate-y-1/2 active:scale-95"
              onclick="scrollAmount('image-container1', -1)"
            >
              <svg
                class="w-10 h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M120 64L80 104L120 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <div
              id="image-container1"
              class="flex space-x-4 h-full overflow-x-auto whitespace-nowrap scrollbar-hide dragscroll active:cursor-grab"
            >
      {youtubekeys.map((videoid) => (
        <div class="w-full lg:w-4/5 xl:w-3/5 h-96 bg-gray-200 ">
          <iframe
           width="600"
           height="400"
            src={`https://www.youtube.com/embed/${videoid}`}
            title="YouTube video player"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
          ></iframe>
        </div>
      ))}
            </div>
            <button id="image-container1-next"
              class="absolute m-3 top-1/2 right-0 transform -translate-y-1/2 active:scale-95"
              onclick="scrollAmount('image-container1', 1)"
              ><svg
                class="w-10 h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M88 64L128 104L88 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button> 
          </div> -->
        </div>

        <div
          class="text-sm md:text-base font-medium overflow-x-auto whitespace-nowrap sm:whitespace-normal py-5 scrollbar-hide"
        >
        {moviegenres && moviegenres.map((genre) => (
          <span class="px-2 py-1 m-1 rounded-full ring-1 ring-white">
            {genre}
          </span>
        ))}
       <!--   <span class="px-2 py-1 m-1 rounded-full ring-1 ring-white"
            >Action & Adventure</span
          >
           <span class="px-2 py-1 m-1 rounded-full ring-1 ring-white"
            >Comedy</span
          >
          <span class="px-2 py-1 m-1 rounded-full ring-1 ring-white">Drama</span
          > -->
        </div>
        <div id="summary" class="text-sm sm:text-base py-5">
          <span id="short-text"
            >Black Manta seeks revenge on Aquaman for his father's death...</span
          >
          <span id="full-text" style="display: none;"
            >Black Manta seeks revenge on Aquaman for his father's death.
            Wielding the Black Trident's power, he becomes a formidable foe. To
            defend Atlantis, Aquaman forges an alliance with his imprisoned
            brother. They must protect the kingdom.</span
          >
          <button id="read-more" onclick="toggleText()">Read More</button>
        </div>

        <div>

          <div class="sm:hidden flex space-x-3 text-gray-400 ">
           <div class="flex space-x-1 text-medium">
      <svg aria-hidden="true" class="w-5 h-5  text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path></svg>
       
      <span class=""> <span class="text-white font-bold"> 7.5</span>/10</span></div>
      <span>50k</span>
      <span class="text-blue-500">(User
Score)</span>
          </div>

          </div>

        <div class="py-5">
          <span class="text-base md:text-lg font-semibold">Top Billed Cast</span
          >

          <SelectedCasts MovieCast={selectedMovieCast} contantainerid="selectedmoviecast" />
          

          <!-- <div class="relative">
            <button id="image-container2-prev"
              class="hidden sm:flex absolute m-3 top-1/2 left-0 transform -translate-y-1/2 active:scale-95 0"
              onclick="scrollAmount('image-container2', -1)"
            >
              <svg
                class="w-0 sm:w-10 h-0 sm:h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M120 64L80 104L120 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <div
              id="image-container2"
              class="flex space-x-4 overflow-x-auto whitespace-nowrap py-5 scrollbar-hide dragscroll active:cursor-grab"
            >

{
  selectedMovieCast.map((cast) => (
    <div class=" p-2 bg-gray-200 min-w-36 sm:min-w-38 rounded-lg">
      <img
        class="h-auto w-40 md:w-60 aspect-auto object-cover rounded-lg bg-gray-500"
        src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2/${cast.profile_path}`}
        alt=""
      />
      <span class="flex-col space-y-1 flex whitespace-nowrap overflow-hidden py-2">
        <span class="text-xs text-black font-semibold">
          {cast.name}
        </span>
        <span class="text-[10px] text-gray-700 ">{cast.character}</span>
      </span>
    </div>
  ))
}

            </div>
            <button id="image-container2-next"
              class="hidden sm:flex absolute m-3 top-1/2 right-0 transform -translate-y-1/2 active:scale-95"
              onclick="scrollAmount('image-container2', 1)"
              ><svg
                class="w-0 sm:w-10 h-0 sm:h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M88 64L128 104L88 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div> -->
        </div>
        <a href=" " class="text-blue-500 font-semibold hover:underline ">Full Cast & Crew</a>

<div>
  <span class="text-base md:text-lg font-semibold">Media</span
          >
          <div class="relative">
            <button id="image-container3-prev"
              class="hidden sm:flex absolute m-3 top-1/2 left-0 transform -translate-y-1/2 active:scale-95 0"
              onclick="scrollAmount('image-container3', -1)"
            >
              <svg
                class="w-0 sm:w-10 h-0 sm:h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M120 64L80 104L120 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
            <div
              id="image-container3"
              class="flex space-x-4 overflow-x-auto whitespace-nowrap py-5 scrollbar-hide dragscroll active:cursor-grab"
            >
              {
                Array.from({ length: 9 }, (_, i) => (
                  
                    <img
                      class="h-auto w-40 md:w-60 aspect-auto object-cover"
                      src="https://media.dev.to/cdn-cgi/image/width=400,height=600,fit=cover,gravity=auto,format=auto/https://image.tmdb.org/t/p/original/rXpTUaZmmo91bPTNXZPkoHaOFM.jpg"
                      alt=""
                    />
                    
                 
                ))
              }
            </div>
            <button id="image-container3-next"
              class=" absolute m-3 top-1/2 right-0 transform -translate-y-1/2 active:scale-95"
              onclick="scrollAmount('image-container3', 1)"
              ><svg
                class="w-0 sm:w-10 h-0 sm:h-10"
                width="208"
                height="208"
                viewBox="0 0 208 208"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  opacity="1"
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  fill="white"></path>
                <path
                  d="M104 200C157.019 200 200 157.019 200 104C200 50.9807 157.019 8 104 8C50.9807 8 8 50.9807 8 104C8 157.019 50.9807 200 104 200Z"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M88 64L128 104L88 144"
                  stroke="black"
                  stroke-width="16"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
</div>
      </section>
    </div>
  </main>
</Layout>

<style is:global >
  /* Hide scrollbar for Chrome, Safari and Opera */
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
</style>
<script is:inline>
  // function toggleText() {
  //   var shortText = document.getElementById("short-text");
  //   var fullText = document.getElementById("full-text");
  //   var readMoreButton = document.getElementById("read-more");

  //   if (fullText.style.display === "none") {
  //     fullText.style.display = "inline";
  //     shortText.style.display = "none";
  //     readMoreButton.innerHTML = "Read Less";
  //   } else {
  //     fullText.style.display = "none";
  //     shortText.style.display = "inline";
  //     readMoreButton.innerHTML = "Read More";
  //   }
  // }
  // <button onclick="scrollAmount('image-container1', -1)">Prev</button>
  // <button onclick="scrollAmount('image-container1', 1)">Next</button>

  // <button onclick="scrollAmount('image-container2', -1)">Prev</button>
  // <button onclick="scrollAmount('image-container2', 1)">Next</button>
  // function scrollAmount(containerId, direction) {
  //   var container = document.getElementById(containerId);
  //   var amount = window.innerWidth * 0.7 * direction; // Scroll 70% of the screen width
  //   container.scrollBy({ top: 0, left: amount, behavior: "smooth" });
  // }


  // var containerIds = ['youtubevideos', 'selectedmoviecast', 'image-container3']; // Add more container IDs as needed

  // function scrollAmount(containerId, direction) {
  //   var container = document.getElementById(containerId);
  //   var amount = window.innerWidth * 0.7 * direction; // Scroll 70% of the screen width
  //   container.scrollBy({ top: 0, left: amount, behavior: "smooth" });

  //   // After scrolling, check if the buttons should be hidden
  //   setTimeout(function() {
  //     hidePrevButton(containerId);
  //     hideNextButton(containerId);
  //   }, 200); // Wait for the scroll to finish
  // }

  // function hidePrevButton(containerId) {
  //   var container = document.getElementById(containerId);
  //   var prevButton = document.getElementById(containerId + '-prev');

  //   if (container.scrollLeft <= 0) {
  //     prevButton.style.display = 'none';
  //   } else {
  //     prevButton.style.display = 'block';
  //   }
  // }

  // function hideNextButton(containerId) {
  //   var container = document.getElementById(containerId);
  //   var nextButton = document.getElementById(containerId + '-next');

  //   if (container.scrollLeft + container.offsetWidth >= container.scrollWidth) {
  //     nextButton.style.display = 'none';
  //   } else {
  //     nextButton.style.display = 'block';
  //   }
  // }

  // // Call hidePrevButton and hideNextButton for each container when the page loads
  // window.addEventListener('load', function() {
  //   containerIds.forEach(function(containerId) {
  //     hidePrevButton(containerId);
  //     hideNextButton(containerId);
  //   });
  // });

  // // Add scroll event listener to each container
  // containerIds.forEach(function(containerId) {
  //   var container = document.getElementById(containerId);
  //   container.addEventListener('scroll', function() {
  //     hidePrevButton(containerId);
  //     hideNextButton(containerId);
  //   });
  // });

  // /**
  //  * @fileoverview dragscroll - scroll area by dragging
  //  * @version 0.0.8
  //  *
  //  * @license MIT, see http://github.com/asvd/dragscroll
  //  * @copyright 2015 asvd <heliosframework@gmail.com>
  //  */

  // (function (root, factory) {
  //   if (typeof define === "function" && define.amd) {
  //     define(["exports"], factory);
  //   } else if (typeof exports !== "undefined") {
  //     factory(exports);
  //   } else {
  //     factory((root.dragscroll = {}));
  //   }
  // })(this, function (exports) {
  //   var _window = window;
  //   var _document = document;
  //   var mousemove = "mousemove";
  //   var mouseup = "mouseup";
  //   var mousedown = "mousedown";
  //   var EventListener = "EventListener";
  //   var addEventListener = "add" + EventListener;
  //   var removeEventListener = "remove" + EventListener;
  //   var newScrollX, newScrollY;

  //   var dragged = [];
  //   var reset = function (i, el) {
  //     for (i = 0; i < dragged.length; ) {
  //       el = dragged[i++];
  //       el = el.container || el;
  //       el[removeEventListener](mousedown, el.md, 0);
  //       _window[removeEventListener](mouseup, el.mu, 0);
  //       _window[removeEventListener](mousemove, el.mm, 0);
  //     }

  //     // cloning into array since HTMLCollection is updated dynamically
  //     dragged = [].slice.call(_document.getElementsByClassName("dragscroll"));
  //     for (i = 0; i < dragged.length; ) {
  //       (function (el, lastClientX, lastClientY, pushed, scroller, cont) {
  //         (cont = el.container || el)[addEventListener](
  //           mousedown,
  //           (cont.md = function (e) {
  //             if (
  //               !el.hasAttribute("nochilddrag") ||
  //               _document.elementFromPoint(e.pageX, e.pageY) == cont
  //             ) {
  //               pushed = 1;
  //               lastClientX = e.clientX;
  //               lastClientY = e.clientY;

  //               e.preventDefault();
  //             }
  //           }),
  //           0
  //         );

  //         _window[addEventListener](
  //           mouseup,
  //           (cont.mu = function () {
  //             pushed = 0;
  //           }),
  //           0
  //         );

  //         _window[addEventListener](
  //           mousemove,
  //           (cont.mm = function (e) {
  //             if (pushed) {
  //               (scroller = el.scroller || el).scrollLeft -= newScrollX =
  //                 -lastClientX + (lastClientX = e.clientX);
  //               scroller.scrollTop -= newScrollY =
  //                 -lastClientY + (lastClientY = e.clientY);
  //               if (el == _document.body) {
  //                 (scroller = _document.documentElement).scrollLeft -=
  //                   newScrollX;
  //                 scroller.scrollTop -= newScrollY;
  //               }
  //             }
  //           }),
  //           0
  //         );
  //       })(dragged[i++]);
  //     }
  //   };

  //   if (_document.readyState == "complete") {
  //     reset();
  //   } else {
  //     _window[addEventListener]("load", reset, 0);
  //   }

  //   exports.reset = reset;
  // });
</script>
../../../components/youtube/YoutubeVideos.jsx